---
title: "Analysing Networks with Tidygraph"
format: revealjs
editor: visual
---

## Today's lesson:

-   Import an edge list and turn it into a tidygraph object.
-   Calculate global and node-level metrics on it.
-   Join to a separate table of node attributes.
-   Use this to filter and interpret the network.

## Why use a coding language for networks?

-   Allows us to work with larger datasets
-   Makes our code reproducible (others can re-run it and get the same results)
-   Can use the same steps for multiple datasets.

## We'll use three R packages:

-   **Igraph** (creating the network, and analysing it)
-   **Ggraph** (making network visualisations)
-   **Tidygraph** (transforming the data in your network, filtering, etc.)

## Tidygraph package

-   Special object in R containing an edge list and a linked node list.
-   Allows us to work on the data using the functions we've learned such as `filter()`, `arrange()`, `mutate()`, `left_join()` and so forth.
-   As well as calculating network metrics and creating visualisations and so forth.

## The tidygraph structure

![](images/paste-3F24BCC3.png)

## Steps:

-   Open the file **notebooks/course_book/course_code_4-2.Rmd**
-   Use file-\> save as to save it in your 'my work' folder.
    -   **NB: The notebook paths assume you have moved it into your 'my work' folder**
-   Use this to follow along the live coding demo (you don't need to change anything)
-   Assignment is in the usual place (notebooks/4-2-networks-with-r_nb.Rmd)
