---
title: "Visualising Networks with R and Ggraph"
format: revealjs
editor: visual
---

## Why Visualise a Network?

-   *Descriptive data analysis*, as a way of describing the overall structure of graph

-   *Exploratory data analysis,* where it's used as a sort of map to understand its various components, and to help spot patterns or interesting features by eye.

## Visualising involves making decisions

-   Nothing inherently spatial about a graph: it is simply a record of connections between nodes.

-   When we choose to represent it visually, we have to make decisions as to its form and how precisely its nodes and edges are placed in 2D (or even 3D) space.

## Force-directed network visualisations

-   Use a simulation of physical forces in order to create sensible placements of nodes.

-   Fruchterman-Reingold layout:

    -   Treats edges like a spring.

    -   Nodes which share an edge are attracted to each other using a spring-like force; every pair of nodes in the system also has a repulsive force.

    -   The algorithm simulates this physical system and stops when the distances between the nodes means that the system is in equilibrium.

## What are the advantages of a force-directed graph?

-   A good force-directed graph can actually convey a great deal of information about a network.

-   The paper for this week's reading argues that the ambiguity of a force-directed graph can actually make them very useful for exploratory data analysis, when they are interpreted correctly.

## How might we 'read' a network graph?

![](images/paste-2FF86B18.jpg)

::: notes
How might we describe it?

We could describe it as the following:

-   Spatially (ignoring the colours), there are three main sections: a large central section, and two smaller sections, one to the bottom-right and another, even smaller, to the top-left of the main section.

-   This main section is shaped a bit like a hairbrush: it has an elongated 'handle', and an attached 'brush' at the top.

-   The colours are distinct, meaning that the force-directed graph did a good job in replicating the clusters found by the community detection algorithm.

-   To understand why it might have this shape, we looked into the nodes in each of its clusters.

-   The first thing we noted was that the almost separate 'islands' were groups of Dublin (larger and closer island) and US publishers.

-   The main section is made up of clusters of different time periods.

-   The 'handle' is mostly London-based publishers, and the 'brush' is a group of Scottish publishers.

-   These Scottish publishers are mostly connected to the later London clusters (red/pink).

-   Scottish publishers are much closer to the London core than either Dublin or US.
:::

## Some inferences we might make from this diagram. {.smaller}

-   US and Dublin publishers were very separate from a London/Edinburgh publishing axis.

-   For London publishers, the strongest pull is temporal rather than any other aspect.

-   Over time, the closeness of the Edinburgh and London publisher networks grew.

**When used correctly and with more knowledge about a network, force-directed diagrams like this can help to spot distinct clusters, structural 'holes', and other features of a network.**

## Other Network Visualisations

There are many other ways besides a 'force-directed' graph to visualise a network.

## Bipartite graph

```{r message=FALSE, warning=FALSE}

library(tidygraph)
library(ggraph)
library(tidyverse)
library(igraph)
EL = c(1,7,2,6,3,8,2,5,4,6,1,5,2,6)
types = rep(0:1, each=4)
g = make_bipartite_graph(types, EL, directed = FALSE)

g %>% ggraph('bipartite')+ 
  geom_edge_link() + 
  geom_node_point(size = 10, aes(color = as.character(types)))  + coord_flip() + theme_void() + theme(legend.position = 'bottom') + labs(color = 'Type:')
```

## Adjacency Matrix

X and y axes contain each name in the network. A filled square is drawn for each edge, where they intersect.

![](images/paste-873426CE.png)

## Network Visualisations with R and ggraph.

-   `Ggraph` uses a 'grammar of graphics', a syntax which maps data to particular visual elements.

-   Nodes and edges are added as 'layers' on top of each other

-   Allows for huge amount of customisation

## Examples

```{r}
letters = read_csv("../data/letter_data1670.csv", col_types = cols(.default = "c"))
edge_list = letters %>% 
  filter(date <'1670-12-31')%>% 
  group_by(from_id, to_id) %>% 
  tally(name = 'weight') 

g = edge_list %>% 
  as_tbl_graph(directed = F) %>% 
  mutate(group = group_louvain()) 

g %>% as_tbl_graph() %>%  
  mutate(component = group_components()) %>% 
  filter(component == 1) %>% 
  ggraph()+ geom_edge_link() + geom_node_point()

```

## Examples

```{r}

g %>% as_tbl_graph() %>%  
  mutate(component = group_components()) %>% 
  mutate(degree = centrality_degree(mode = 'all', weights = weight)) %>% 
  filter(component == 1) %>% 
  ggraph()+ 
  geom_edge_link(alpha = .25) + geom_node_point(aes(size = degree)) + scale_size_area()

```

## Examples

```{r}
node_attributes = read_csv('../data/node_attributes.csv')
g %>% as_tbl_graph() %>%  
  left_join(node_attributes, by = 'name') %>% 
  mutate(component = group_components()) %>% 
  mutate(group = group_louvain()) %>% 
  mutate(degree = centrality_degree(mode = 'all', weights = weight)) %>% 
  filter(component == 1) %>% 
  ggraph()+ 
  geom_edge_link(alpha = .25) + 
  geom_node_point(aes(size = degree, fill = as.factor(group)), 
                  pch = 21, color = 'black') +
  scale_size_area() + 
  theme_void()

```

## Examples

```{r}
node_attributes = read_csv('../data/node_attributes.csv')
g %>% as_tbl_graph() %>%  
  left_join(node_attributes, by = 'name') %>% 
  mutate(component = group_components()) %>% 
  mutate(group = group_louvain()) %>% 
  mutate(degree = centrality_degree(mode = 'all', weights = weight)) %>% 
  filter(component == 1) %>% 
  ggraph()+ 
  geom_edge_link(alpha = .25) + 
  geom_node_point(aes(size = degree, fill = as.factor(group)), 
                  pch = 21, color = 'black') +
  scale_size_area() + 
  geom_node_label(aes(label = ifelse(degree>30, main_name, NA)), repel = TRUE, nudge_x = .1, nudge_y = -.9, direction = 'y', alpha = .8) + 
  theme_void()

```

## Ggraph layers

![](images/paste-C994C737.png)
