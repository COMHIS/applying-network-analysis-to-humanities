---
title: "Other Network Types"
subtitle: "Visualising with ggraph, II"
author: "Yann Ryan"
format: revealjs
editor: visual
---

## Reading Questions:

-   What do the authors mean by the 'abstraction' of humanities data? What are the advantages and disadvantages of doing so?
-   What are the assumptions made by the authors in the 'toy example' on page 76? What other ways could they have treated this data?
-   What is the 'trade-off' mentioned on page 78?
-   What do the authors suggest might be the best way to 'solve' the skills gap between those with quantitative and those with traditional humanities skills?

## Discreet versus continuous variables

A very important concept to bear in mind when making visualisations is the differences in the way **discrete** and **continuous** value are treated. For the purposes of visualisation we can think of the differences like this:

-   A **continuous** value is something you can measure, for example height. There are infinite values that a height can be.

-   A **discrete** value is one where the values are one of a limited set of set values. For example, occupation, or colour. Another name for this is **categorical** value.

## Discreet versus continuous variables

```{r}
library(tidyverse)
df = tibble(fruit = c("banana", "apple", "orange"), 
            total = c(100, 200, 300) ,
       weight = c(50.2, 75.11, 20.547), 
       delivery = c("Monday", "Wednesday", "Saturday"))

df %>% kableExtra::kbl()
```

-   In this data, R treats *fruit* as a **discrete** value, *total* and *weight* as **continuous** values, and *delivery* as a **discrete** value.

## With continuous value:

```{r}
df %>% ggplot() + geom_col(aes(x = fruit, y = total, fill = weight))
```

## With continuous value:

-   Ggplot (and ggraph will work in the same way) assigns each bar a colour from a spectrum running from dark to light blue, according to its value.

-   In this case, **the larger the weight value, the lighter the colour will be.**

## Fill with a **discrete** value, **delivery:**

```{r}
df %>% ggplot() + geom_col(aes(x = fruit, y = total, fill = delivery))
```

## Fill with a **discrete** value, **delivery:**

-   Ggplot recognises that the values are discrete, and changes the colour scheme accordingly.

-   Rather than try and map the values across a colour scale, it picks three **constrasting** colours to highlight that each value is a separate category

## Which to use? {.smaller}

**Some aesthetics can only map to one of the two types**.

We saw this in the last class when we tried to map a continuous variable (degree) to the **shape** aesthetic.

An opposite example is the aesthetic **alpha,** which means **transparency.**

Transparency cannot be categorical (at least in practical terms), so mapping alpha to a **discrete** variable doesn't make any sense.

## What makes a good network visualisation? {.smaller}

-   You will rarely be able to make a good network visualisation simply by pushing a button and using the default settings.

-   You should think about what your network is trying to communicate and to what audience, and spend some time

-   Treat the visualisation as carefully as you would an essay or other piece of text. Is it easy to understand?

## What makes a good network visualisation? {.smaller}

-   Make sure you really need a network graph, and that another method of communicating the information wouldn't be better.

-   For example, if your diagram is simply showing the most influential nodes, would a bar chart (or even a table) with their degree work just as well?

-   Use colour/shape/size if you need to, but make sure you explain what each element is doing.

-   Spend some time showing your readers how to 'read' the visualisation. What is interesting about the left/right/top/bottom of the diagram? What is the significance of nodes grouped together, and what about nodes in the centre versus nodes towards the edge? Are there obvious clusters and gaps, and do these show up in the visualisation?

## Example network

```{r}
library(tidygraph)
library(tidyverse)
library(ggraph)
letters = read_csv("../data/letter_data1670.csv", col_types = cols(.default = "c"))

node_attributes = read_csv('../data/node_attributes.csv')


edge_list = letters %>% 
  group_by(from_id, to_id) %>% 
  tally(name = 'weight')

sample_tbl_graph = edge_list %>% 
  as_tbl_graph()

sample_tbl_graph = sample_tbl_graph %>% left_join(node_attributes, by = 'name')

sample_tbl_graph%>% 
  igraph::as.undirected() %>% 
  as_tbl_graph()%>% 
  activate(nodes) %>% 
  mutate(degree = centrality_degree(mode = 'total')) %>% 
  mutate(community = group_edge_betweenness(weights =NULL)) %>% 
  filter(community %in% 1:4) %>% 
  ggraph('fr') + 
  geom_edge_link(alpha = .2)+ 
  geom_node_point(aes(size = degree, color = as.character(community), shape = politician))  + 
  geom_node_text(aes(label = ifelse(degree >2, main_name, NA)), size = 2.5, repel = T) + 
  theme_void() + 
  theme(legend.position = 'none') 
```

## Exercise

-   In your groups, design a network graph from the sample data.
-   Pick one person to share their screen and code
    -   Experiment with the layouts, taking into account your particular network

    -   Map values to aesthetics, such as size, shape and transparency

    -   Filter or pre-process your data - to make a large network more readable, for example.

Be prepared to present your network to the rest of the groups, and talk through briefly why you made your design decisions.
